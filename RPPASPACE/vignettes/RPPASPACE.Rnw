% NOTE -- ONLY EDIT THE .Rnw FILE!!!  The .tex file is
% likely to be overwritten.
%
% $Id: RPPASPACE.Rnw 975 2015-07-27 01:02:25Z proebuck $
%
%\VignetteIndexEntry{RPPA Primer}
%\VignetteKeywords{Preprocessing, Lysate Arrays}
%\VignetteDepends{methods, stats, utils}
%\VignettePackage{RPPASPACE}
\documentclass{article}

\usepackage{hyperref}

\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\textit{#1}}}
\newcommand{\Rfunction}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\textit{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textsf{#1}}}

\begin{document}

\title{Beginning Lysate Array Doc}
\author{Keith Baggerly}
\date {June 2008}

\maketitle
\tableofcontents

\section{Introduction}
The \Rpackage{RPPASPACE} package provides tools for the 
analysis of reverse-phase protein arrays (RPPAs), which are also
known as ``tissue lysate arrays'' or simply ``lysate arrays''. 

\subsection{The Biology of RPPAs}

RPPAs resulted from an attempt to extend the microarray
approach to the measurement of proteins. A microarray is
``forward-phase'' in that it simultaneously measures the 
expression levels of many genes in one biological sample.
An RPPA is ``reverse-phase'' in that it simultaneously 
measures the expression levels of one protein in many
biological samples.  

The biological samples of interest are lysed, producing 
a homogeneous mixture (lysate), and these lysates are
printed onto an array according to a dilution series. 
The arrays are typically glass with a nitrocellulose 
membrane on one side; the lysates are printed on the 
nitrocellulose. 

In order to measure the protein of interest, the array
is first interrogated with an antibody specific to the 
protein of interest (the primary antibody, typically 
derived from a mouse, rabbit or goat). This is allowed
to bind, and loose material is washed away. The array 
is then interrogated with a labeled antibody (a secondary
antibody, such as anti-goat immunoglobulin) which recognizes 
the primary antibody. This is allowed to bind, and loose
material is washed away. In the most common labeling 
approach, the secondary antibody is linked to an enzyme,
as with enzyme-linked immunosorbent assays (ELISAs). 
The enzyme substrate is then introduced. The enzyme
reacts with its substrate, causing precipitate to build
up near the site of the reaction: more of the protein of
interest at a spot means more enzyme should bind and more 
precipitate should form. After a short period, the loose
substrate is washed away. After drying, the array is 
then imaged, typically with a flatbed scanner, producing
a TIF image file. (Ideally, the TIF file should be 16-bit
grayscale. We have encountered cases where the files were
exported as true color (24-bit), and then converted to 
grayscale afterwards. Depending on the software used,
this latter step can introduce substantial distortions.)
The printed spots visible in the image file 
are then quantified using software developed for cDNA
microarrays. 

Several other methods of labeling the secondary antibody 
have been tried, including fluorescent dyes and quantum dots,
but all methods still yield a TIF image file which is
then quantified. 

\subsection{The RPPASPACE Model}

A key distinction between reverse-phase and forward-phase
assays is that for reverse-phase assays the hybridization
kinetics should be the same at every spot, as all samples
are being queried for the same protein. Thus, in the case
of lysate arrays, we expect there to be a single common 
dose-response curve, instead of a separate one for each 
sample. In particular, we can borrow strength across samples
for the estimation of baseline and saturation intensity. 

We assume that the observed intensity for 
sample $i$, dilution step $j$, replicate $k$ can be fit as
$$
  y_{ijk} = \alpha + \beta * g(\gamma(\delta_i + x_{ij})) + \epsilon_{ijk},
$$
where $g(x) = e^x/(1+e^x)$. The shape parameters of the 
logistic response curve, $\alpha$, $\beta$, and $\gamma$
are common for all samples. The $x_{ij}$ are known
offsets from the level of interest, such as the undiluted
or ``neat'' state. We typically use $\log_2$ units for $x_{ij}$,
letting the adjustment to base $e$ be subsumed into $\gamma$. 
The $\delta_i$ terms represent the unknown true protein
concentration at the reference level for sample $i$. 
Finally, $\epsilon_{ijk}$ is taken to be white noise. 

We fit the above model using \Rfunction{nls} iteratively,
alternating between fitting the shape parameters and the 
sample concentrations. 

\subsection{The Classes}

There are 3 key classes in the RPPASPACE package:
\begin{itemize}
  \item \Rclass{RPPA}, representing the quantification of an array,
  \item \Rclass{RPPADesign}, specifying where each sample/dilution
        step combination is printed on the array, and
  \item \Rclass{RPPAFit}, the results of fitting the RPPASPACE
        model to an \Rclass{RPPA}, \Rclass{RPPADesign} combination.
\end{itemize}
More details can be found in the documentation for 
\Rfunction{RPPA}, \Rclass{RPPA-class},
\Rfunction{RPPADesign}, \Rclass{RPPADesign-class},
\Rfunction{RPPAFit}, and \Rclass{RPPAFit-class},
but we will attempt to cover the high points below. 

%Unfortunately, 
%measuring proteins is in some ways more difficult than
%measuring DNA or RNA. Specifically, 
%why is measuring protein different?
%how do we measure protein?
%ELISAs
%Western Blots
%Parallelizing the approach
%protein arrays and antibody arrays
%reverse phase vs forward phase
%tissue arrays vs lysate arrays
%scanning the lysate arrays
%quantifying lysate arrays
%dilution series, dose response curves, and borrowing strength

\section{A Detailed Example: Breast Cancer Cell Lines}

We begin with an example where we were attempting to 
measure the relative abundances of several proteins 
within a panel of 40 breast cancer cell lines. The 
proteins were chosen largely from the PI3K pathway,
which is frequently disregulated in tumors. We're 
going to focus on 3 arrays from this study, corresponding
to the proteins AKT, $\beta$-catenin, and ERK2. These
data are included as the \Robject{rppaCell} dataset, 
described as \Rcode{data?rppaCell}.  

\subsection{Getting Started}



There are two types of objects in the data file. First, we have an 
\Rclass{RPPADesign} object, \Robject{design40}, giving the layout of
the array. For each spot, this specifies what sample has been printed,
 and what the dilution level offset of that spot is (in $\log_2$ units)
relative to the reference level we're trying to estimate. Second,
we have several \Rclass{RPPA} objects, \Robject{akt}, \Robject{c.erk2},
and \Robject{ctnnb1}, each containing the spot-level quantifications
supplied by the microarray image quantification software. These arrays
were quantified using MicroVigene. 

\subsection{RPPA Details}

If you'd like to take a look at the initial text files
with the quantifications, feel free; these are also included.
These also allow us to illustrate how an \Rclass{RPPA} object can
be constructed from a MicroVigene .txt file:


This \Rclass{RPPA} object is the same as \Robject{akt}. Now,
there's really not that much to an \Rclass{RPPA} object:


just the data frame containing the quantifications and
the file the data was acquired from. 
%As an aside, the 
%encapsulation principle of object-oriented programming
%suggests that accessing the slots of an object directly, 
%as we do here, is a bad thing. Extractor functions should
%be used. However, we want to make sure you know how to get
%at the guts of an object if you decide you want to tweak
%it yourself. In most cases, we will supply accessor functions 
%to extract the bits of an object that we will need.

Now, we've seen what the \Robject{file} slot contains, but
what about the \Robject{data} slot? As mentioned above, it's
simply a data frame, with named components corresponding for 
the most part to measurements associated with each spot. 
Several of the functions that act on \Rclass{RPPA} objects have 
a \Rfunarg{measure} argument, and they're simply looking for 
the name of the appropriate component. What do we have 
here? 


Most of the columns have ready interpretations, but the first
six here are special. An \Rclass{RPPA} object must have
\Robject{Main.Row}, \Robject{Main.Col}, \Robject{Sub.Row},
and \Robject{Sub.Col} to specify the position of the spot,
\Robject{Sample} to tell us what the software thinks was
printed, and \Robject{Mean.Net} as a background-corrected
measure of spot intensity. 

The generator function is tuned for reading MicroVigene files
at present. If we have other types of data files, we can use
the \Rfunarg{software} argument of the \Rfunction{RPPA}
generator to invoke our own function to populate the \Robject{data}
manually. The function must take a \Rclass{connection} object
and return a \Rclass{data.frame} object. 

instead.
might want to assemble an \Robject{RPPA} object more directly.


again, this \Rclass{RPPA} object is just the same as
the others that we have assembled for AKT. 

Given an \Rclass{RPPA} object, one of the first things we
can do is simply {\em look} at the data, by checking
heatmap images of the quantifications spatially arranged
to match their positioning on the array. 


By default, image will use ``Mean.Net'' as the measure. 
Different spots on the array are separated by white 
lines, and different subgrids (patches) are separated
by black lines. Here, we can see that the top 2 rows
in each patch are different than the bottom 2 rows. 
To see how big the difference is, let's add a colorbar:

The top 2 rows are decidedly brighter. This pattern 
is due to the design of the arrays used in this experiment.
Every patch corresponds to a different sample, and the 
spots within a patch comprise two replicates of an 8-step
dilution series (protein concentration decreases moving from 
left to right here). The top 2 rows are replicates of the 
first 4 dilution steps, and the bottom 2 rows are replicates
of the last 4. We'll return to the design shortly. 

In addition to measures of foreground intensity such
as ``Mean.Net'', measures of background (such as ``Vol.Bkg'')
can often suggest potential problems. For example,   


shows that something odd may have happened in the patch
at Main.Row 3, Main.Col 6 (try calling \Rmethod{image}
with ``Main.Row'' or ``Main.Col'' as the measure to get
a better feel for the coordinates, if needed). Thus, 
we'll pay special attention to the results from this 
patch. We note in passing that the numbers for Vol.Bkg
correspond to the estimated background at the spot times
the number of pixels in the spot, and as such aren't 
directly comparable to the values from Mean.Net (especially
as the size of the spot can vary). The scaled background 
values correspond to the difference between Mean.Total and Mean.Net.
If desired, we can explore the exact relationship further:


Similar checks of the background for the other \Rclass{RPPA}
objects show that there was a problem affecting the bottom 
edge of the $\beta$-catenin slide, \Robject{ctnnb1}.


Estimates for samples in these regions are decidedly suspect. 

\subsection{RPPADesign Details}

Now, the \Rclass{RPPA} objects are only part of the story;
we can't proceed to quantify the different samples unless
we know the layout of the samples on the array. This information
is contained in an \Rclass{RPPADesign} object, here 
\Robject{design40}. Let's take a closer look at that. 


The \Rclass{RPPADesign} object has four slots: \Robject{layout}, 
\Robject{alias}, \Robject{sampleMap}, and \Robject{controls}.
Of these, the most important is \Robject{layout}, which is a 
data frame specifying what is printed at each spot. If we take
a look at the contents of the \Robject{layout},


most of the terms look familiar. \Robject{Main.Row}, \Robject{Main.Col},
\Robject{Sub.Row} and \Robject{Sub.Col} specify the position of the 
spot on the array. \Robject{Sample} gives the name of the biological
sample printed at the spot. \Robject{Steps} gives the dilution step
of the spot within the sample in terms of a $\log_2$ offset relative
to a reference point within the series. Finally, \Robject{Series} 
lets us subset the measurements within a sample, if desired. To 
make this clearer, let's take a look at the first few entries.


For this array, the first 16 spots comprise the patch in the upper
left hand corner, and all of these spots are derived from sample 1. 
The reference point was taken to be midway through the 8-step 
dilution series, so the most intense (undiluted) spots have a
step value of 3.5. The replicate measurements for this sample
have been arbitrarily grouped into two distinct ``series'', in 
part as a consistency check. When we estimate protein concentrations, 
we produce an estimate for each series; series from the same sample
should yield similar values. The pattern shown here is repeated
for the other patches on the array. 

The trickiest part of constructing an \Rclass{RPPADesign} object 
is often the specification of the dilution pattern and the 
grouping into series. For example, 


This version of the generator extracts some of the needed layout
information from the \Rclass{RPPA} object itself. Now, we can
construct an \Rclass{RPPADesign} object using a more low-level
approach, such as reading the sample information (and possibly
the dilution levels as well) from a separate file. 


Rather ornate, but it pulls things together. 

\subsection{RPPAFit Details}

Given an \Rclass{RPPA} object and an \Rclass{RPPADesign} object,
we can use a model to estimate the protein concentrations,
producing an \Rclass{RPPAFit} object. The fitting function 
requires that we specify the measure to be used, in
addition to the \Rclass{RPPA} and \Rclass{RPPADesign} objects. 


This fits the basic RPPASPACE model: a logistic dose
response curve common to all samples, with a separate
offset term for each series (not sample). 

We can get a quick feel for the shape of the curve
by looking at a ``cloud'' plot showing the observed
intensity and estimated log protein concentration for 
each spot:


The data appears to follow a curve pretty well here. 
We can get a better idea of how good the fit is by 
decomposing the observed values into ``fitted'' +
``residuals''. In looking at the fitted values, we
need to keep in mind that the model we are using
results in fitted values for the observations in 
terms of both intensity (the default, or ``Y'')
and log concentration (``X''). 


There is clearly an increase in the variability 
of the residuals as a function of the estimated
log concentrations. This version of the package
does not address this issue. 

In any event, there is at least one clear outlier
in the residuals. We may be able to understand this
better if we look at the residuals arranged spatially:

The most extreme residuals are located in the patch
in Main.Row 3, Main.Col 6, which we had already 
flagged for attention based on odd behavior in the 
background. 

%As an aside, we note that while there were 40 samples
%printed on this array, each sample was represented by 
%two replicate series. This provides one quick check 
%of consistency.
%plot(aktFit@concentrations[seq(1, 80, 2)],
%     aktFit@concentrations[seq(2, 80, 2)])

We can also look at fits of each individual 
series to the underlying response curve:

As this produces a lot of figures, we have chosen to 
not reproduce them here. 

So, what was the estimated concentration for the first
series? We can find out in a few different ways.

Individual elements are named, so we can readily extract
information about the samples of interest. Similarly, 
we can get the parameters for the fitted model in a few
different ways.

Now, at this point we've computed fits by series.
We can use this to give us some idea of the stability 
of the results for a sample by doing the equivalent 
of an MA-plot, plotting the difference in replicates
as a function of their average. 
\begin{center}
\end{center}

Eyeballing the fit suggests a standard deviation
of about 0.2 (in $\log_2$ units). Given the x-range, 
this is acceptable. Of course, if we know that 
replicates agree fairly well, we'd like to go back
and fit the results for each sample without 
splitting things up!

% Revisit with design ``bySample''
The main thing this requires is a slightly different
\Rclass{RPPADesign} object, grouping all spots from a single
sample together. 

Now, we simply rerun the fit


%-- specify a sample and extract the results --
%-- run using ignore Negative --
%-- get some confidence intervals for our estimates --





%\subsection{The Example at Speed}

%\section{Areas Under Development}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{\textbf Note:} This document was generated using the \Rfunction{Sweave}
function from the R \Rpackage{tools} package. The source file is in the
\Rfunction{/doc} directory of the package \Rpackage{RPPASPACE}.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\end{document}

